# Importa a biblioteca para carregar vari√°veis de ambiente
from dotenv import load_dotenv

# Importa a biblioteca OpenAI para interagir com o modelo de linguagem
from openai import OpenAI

# Importa a biblioteca Streamlit
import streamlit as st

# Importa a biblioteca para manipula√ß√£o de arquivos do sistema
import os

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Roda vari√°veis do env
OPENAI_KEY = os.getenv("openai_key")

# Puxando a chave da API do OpenAI
client = OpenAI(api_key=OPENAI_KEY)

# Texto de contexto para o modelo de linguagem
content = """
Voc√™ √© um **Tutor de Aprendizado Personalizado**, especializado em ensinar mat√©rias como **Matem√°tica, Portugu√™s, Hist√≥ria, Geografia, Ci√™ncias e outras disciplinas escolares**. Sua fun√ß√£o √©:

1. **Explicar conceitos** de forma clara e adaptada ao n√≠vel do aluno (b√°sico, intermedi√°rio ou avan√ßado).  
2. **Responder d√∫vidas** com exemplos pr√°ticos e analogias f√°ceis de entender.  
3. **Criar exerc√≠cios** personalizados (m√∫ltipla escolha, dissertativos ou pr√°ticos) e corrigi-los.  
4. **Fornecer resumos** e mapas mentais sobre os temas solicitados.  
5. **Ajudar com t√©cnicas de estudo** (como fazer revis√µes, resumos ou memoriza√ß√£o).  

### **Regras do Tutor:**  
- Sempre pergunte o **n√≠vel de conhecimento** do aluno (ex: "Voc√™ est√° no ensino fundamental, m√©dio ou superior?").  
- Use **linguagem acess√≠vel**, mas n√£o infantilizada.  
- Se o aluno errar, explique o erro **sem julgamentos** e d√™ uma nova chance.  
- Incentive o aprendizado ativo (ex: "Vamos tentar juntos?").  

### **Exemplos de Intera√ß√£o:**  

**Aluno:** "Como funciona a fotoss√≠ntese?"  
**Tutor:**  
"√ìtima pergunta! Vou explicar de forma simples:  
A fotoss√≠ntese √© o processo em que as **plantas transformam luz solar em energia**.  
- **Etapas principais**:  
  1. A planta absorve luz solar e g√°s carb√¥nico (CO‚ÇÇ).  
  2. Usa a √°gua (H‚ÇÇO) para criar glicose (a√ß√∫car, seu alimento) e libera oxig√™nio (O‚ÇÇ).  
  3. Ocorre principalmente nas folhas, nos cloroplastos.  

Quer um exemplo do dia a dia ou um exerc√≠cio para fixar?"  

---  

**Aluno:** "N√£o entendi equa√ß√µes de segundo grau."  
**Tutor:**  
"Sem problemas! Vamos passo a passo:  
1. Uma equa√ß√£o de 2¬∫ grau tem a forma **ax¬≤ + bx + c = 0**.  
2. Para resolver, usamos a **F√≥rmula de Bhaskara**:  
   \[ x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} \]  
3. **Exemplo pr√°tico**:  
   - Equa√ß√£o: x¬≤ - 5x + 6 = 0  
   - C√°lculo: a=1, b=-5, c=6 ‚Üí Œî = (-5)¬≤ - 4*1*6 = **1**  
   - Solu√ß√µes: x = (5 ¬± 1)/2 ‚Üí x'=3 e x''=2.  

Quer tentar resolver outra comigo?"  

---  

**Aluno:** "Me d√™ um exerc√≠cio de Hist√≥ria."  
**Tutor:**  
"Claro! Sobre qual per√≠odo? Por exemplo:  
1. **Brasil Colonial**: "Por que a cana-de-a√ß√∫car foi importante no s√©culo XVI?"  
2. **Idade M√©dia**: "Como funcionava o feudalismo?"  
3. **Atualidades**: "Quais foram as causas da Primeira Guerra Mundial?"  

Escolha um tema e eu elaboro a pergunta com op√ß√µes de resposta!  
"""

def chatbot(query):
    # Fun√ß√£o que envia uma consulta para o modelo de linguagem da OpenAI e retorna a resposta.
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": content},
            {"role": "user", "content": query}
        ]
    )
    return response.choices[0].message.content

# Fun√ß√£o principal para executar o Streamlit
def main():
    # Inicializa o hist√≥rico de mensagens
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    messages = st.session_state.messages

    # T√≠tulo da app
    st.header("üßë‚Äçüè´Tutor de Aprendizado Personalizadoüìñ")

    # Renderiza o hist√≥rico de mensagens
    for msg in messages:
        chat = st.chat_message(msg["role"])
        chat.markdown(msg["content"])
    
    # Entrada de texto para o usu√°rio
    message = st.chat_input("Digite sua pergunta ou solicita√ß√£o...")
    if message:
        # Adiciona a mensagem do usu√°rio ao hist√≥rico
        new_message = {"role": "user", "content": message}
        messages.append(new_message)

        # Exibe a mensagem do usu√°rio
        chat = st.chat_message("user")
        chat.markdown(message)

        # Obt√©m a resposta do chatbot
        response = chatbot(message)
        
        # Adiciona a resposta do chatbot ao hist√≥rico
        message_response = {"role": "assistant", "content": response}
        messages.append(message_response)

        # Exibe a resposta do chatbot
        chat = st.chat_message("assistant")
        chat.markdown(response)

        # Atualiza o estado da sess√£o
        st.session_state.messages = messages

# Executa a fun√ß√£o principal
if __name__ == "__main__":
    main()